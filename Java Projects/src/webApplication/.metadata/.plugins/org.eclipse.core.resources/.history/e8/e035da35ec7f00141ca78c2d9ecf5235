package email;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Date;
import java.util.Enumeration;
import java.util.Properties;

import javax.mail.Flags.Flag;
import javax.mail.Folder;
import javax.mail.BodyPart;
import javax.mail.Flags;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.Multipart;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import com.sun.mail.imap.IMAPFolder;

/**
 * @author mxz301
 * 
 *         Produces a IMAPCLient version for the email application with all the
 *         necessary methods
 *
 */
public class Model {

	static String username = "";
	static String password = "";
	static Properties props = null;
	static IMAPFolder folder = null;
	static Store store = null;
	static String content[];
	static int j = 0;
	private static Message[] messages;
	private static IMAPFolder spamFolder;
	private static IMAPFolder inboxFolder;
	private static IMAPFolder recentFolder;
	public static int count=0;

	/**
	 * CLoses the store and folder of the email
	 * 
	 * @param folder
	 *            and IMAPFolder
	 * @throws MessagingException
	 */
	public static void closeFolderAndStore(IMAPFolder folder)
			throws MessagingException {
		
		
		System.out
				.println("---------------------------------CLossing the Store and the Folder-------------------------------------");

		if (folder != null && folder.isOpen()) {
			folder.close(true);
		}
		if (store != null) {
			store.close();
		}
	}

	private static String sendTo;
	private static String cc;
	private static String subject;
	private static String emailBody;

	/** Sends the message using the required parameter
	 * @param username String username
	 * @param password String password
	 * @param props Property object
	 * @throws AddressException
	 * @throws MessagingException
	 */
	public static void sendMessage(String cc1 ,String sendTo1, String subject1,String emailBody1)
			throws AddressException, MessagingException {

		System.out.println("-----------------------------------Send Message--------------------------------------");
		System.out.println(username);
		System.out.println(password);
		System.out.println(cc);
		System.out.println(sendTo);
		System.out.println(subject);
		System.out.println(emailBody);
		// initialises the username, password and cc 
		cc = cc1;
		sendTo=sendTo1;
		subject=subject1;
		emailBody=emailBody1;
		// checks if there is an attachment
		
		//sets the stpmhost
		String smtphost = "smtp.gmail.com";

		// Get system properties
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", smtphost);
		props.put("mail.smtp.port", "587");
		
         // creates a session and a message
		Session session = Session.getDefaultInstance(props);
		MimeMessage message = new MimeMessage(session);
		//sets the message parameters accordingly
		message.setFrom(new InternetAddress(username));
		message.setRecipients(Message.RecipientType.TO,
				InternetAddress.parse(sendTo));
		message.setSubject(subject);
		message.setText(emailBody);

        // checks if the cc field is not null
		if (cc.length() > 1) {
			message.setRecipients(Message.RecipientType.CC,
					InternetAddress.parse(cc));
		}
		BodyPart messageBodyPart = new MimeBodyPart();
		Multipart multipart = new MimeMultipart();
		//if we have selected attachments
		

		message.setSentDate(new Date());
		message.saveChanges();

		//Sends the message by javax.mail.Transport .
		Transport tr = session.getTransport("smtp"); // Get Transport object
														// from session
		tr.connect(smtphost, username, password); 
		tr.sendMessage(message, message.getAllRecipients()); 

		System.out.println("Email has been Sent");

	}
	
	/**
	 * @param folder
	 *            IMAPFolder
	 * @return String[] containing all the email subjects
	 * @throws MessagingException
	 */
	public static String[] getEmailSubjects(IMAPFolder folder)
			throws MessagingException {
		System.out
				.println("--------------------------------Getting the Email Subjects-------------------------------------");

		// gets the messages from the folder
		messages = folder.getMessages();
		int count = 0;
		// creates the subject[]
		String subject[] = new String[messages.length];

		// for every message it gets the subject and initialises the subject
		// array
		for (Message message : messages) {
			subject[count] = message.getSubject();
			System.out.println("Message number:" + count + " is "
					+ subject[count]);
			count++;

		}
		return subject;
	}

	/**
	 * @param folder
	 *            IMAPFolder
	 * @param i
	 *            index of email
	 * @return String containing the selected email content
	 * @throws MessagingException
	 * @throws IOException
	 */

	public static String getEmailContent(IMAPFolder folder, int i)
			throws MessagingException, IOException {
		System.out
				.println("---------------------------------Get Email Content---------------------------------------------");

		// gets required the message in the selected folder
		Message message = folder.getMessage(i + 1);
		 count = 0;
		String content1 = "";

		// if the message contains normal text then it selects its content
		if (message.getContentType().contains("TEXT/PLAIN")) {
			content1 = message.getContent().toString();

		} else {
			// other wise it gets all the parts of the message using a Multipart
			// data field

			Multipart multipart = (Multipart) message.getContent();

			for (int x = 0; x < multipart.getCount(); x++) {
				BodyPart bodyPart = multipart.getBodyPart(x);

				if (bodyPart.getContentType().contains("TEXT/PLAIN")) {
					try {
						content1 = bodyPart.getContent().toString();
					} catch (NullPointerException e1) {
						System.out
								.println("Get Content --- null pointer exception");
					}
				}

				count++;

			}

		}
		return content1;
	}

	

	/**Sets up the connection to the email
	 * @param value the user name details
	 * @return a Property object
	 */
	public Properties setConnection(String user, String pass) {
		System.out
				.println("-------------------------------------Set the Connection----------------------------------------");
		username = user;
		password = pass;

		// gets the properties of the system
		props = System.getProperties();
		props.setProperty("mail.store.protocol", "imaps");

		
		// Set Property with user name and password for authentication
		props.setProperty("mail.user", username);
		props.setProperty("mail.password", password);

		return props;

	}

	/**Starts the session
	 * @param props Property object
	 * @return a IMAPFolder object containing the selected folder with all the emails
	 * @throws IOException
	 * @throws MessagingException
	 */
	public boolean startSession(Properties props) 

	 {
		System.out
				.println("-------------------------------------Start the Seession--------------------------------------");
		try{
		// creates a new Session object using the parameter props
		Session session = Session.getDefaultInstance(props);

			//Gets the Store object from the mail session, connecting it to the imaps server using the inputed user name and password	
			store = session.getStore("imaps");
			store.connect("imap.googlemail.com", username, password);

			//choose a selected folder where emails are stored
			folder = (IMAPFolder) store.getFolder("inbox");

			//Opens the folder
			if (!folder.isOpen())
				folder.open(Folder.READ_WRITE);
		}
		catch (MessagingException e){
			
			return false;
		}
		return true;

		

	

		
	}

	/** Returns the Spam folder from the email
	 * @param props Property object
	 * @return the spam folder
	 * @throws IOException
	 * @throws MessagingException
	 */
	public static IMAPFolder getSpamFolder(Properties props)
			throws IOException,

			MessagingException {
		System.out
				.println("-------------------------------------Getting the Spam---------------------------------------");
		Session session = Session.getDefaultInstance(props);

		try {
			//connects the store the session
			store = session.getStore("imaps");
			store.connect("imap.googlemail.com", username, password);

			//  Choose a folder, in this case, we chose the spam folder
			spamFolder = (IMAPFolder) store.getFolder("[Gmail]/Spam");

			// Open the folder
			if (!spamFolder.isOpen())
				spamFolder.open(Folder.READ_WRITE);

		}

		finally {

		}

		return spamFolder;
	}

	/**Return the recent folder
	 * @param props Property 
	 * @return  recent folder
	 * @throws IOException
	 * @throws MessagingException
	 */
	public static IMAPFolder getRecentFolder(Properties props)
			throws IOException,

			MessagingException {
		System.out
				.println("-------------------------------------Getting the Recent---------------------------------------");
		Session session = Session.getDefaultInstance(props);

		try {
	
			// connects the store to the server
			store = session.getStore("imaps");
			store.connect("imap.googlemail.com", username, password);

			// Choose a folder, in this case, we chose the recent but Gmail does not have one
			recentFolder = (IMAPFolder) store.getFolder("[Gmail]/Recent");

			// Open the folder
			if (!recentFolder.isOpen())
				recentFolder.open(Folder.READ_WRITE);

		}

		finally {

		}

		return recentFolder;
	}

	/**Return the inbox folder
	 * @param props Property 
	 * @return recent folder
	 * @throws IOException
	 * @throws MessagingException
	 */
	public static IMAPFolder getInboxFolder(Properties props)
			throws IOException,

			MessagingException {
		System.out
				.println("-------------------------------------Getting the InboX---------------------------------------");
		Session session = Session.getDefaultInstance(props);

		try {
			
			store = session.getStore("imaps");
			store.connect("imap.googlemail.com", username, password);

			//  Choose a folder, in this case, we chose the inbox folder
			inboxFolder = (IMAPFolder) store.getFolder("inbox");

			// Open the folder
			if (!inboxFolder.isOpen())
				inboxFolder.open(Folder.READ_WRITE);

		}

		finally {

		}

		return inboxFolder;
	}

	/** Changes the current folder to  a different one
	 * @param folder1 ImapFolder
	 */
	public static void setFolder(IMAPFolder folder1) {
		folder = folder1;

	}

	/**Returns the true if the message is seen and false other wise
	 * 
	 * @param folder IMAPFolder
	 * @param i index of a the message
	 * @return boolean value
	 * @throws MessagingException
	 */
	public static Boolean returnFlags(IMAPFolder folder, int i)
			throws MessagingException {
		System.out
				.println("---------------------------------------Return flags--------------------------------------------");

		//gets the selected message of the selected folder and its flag
		Message message = folder.getMessage(i + 1);
		Flags mes_flag = message.getFlags();
		
		return mes_flag.contains(Flag.SEEN);
	}

	/** Return all the messages of the selected fodler
	 * @param folder IMAP Folder
	 * @return a strign of messages
	 * @throws MessagingException
	 */
	public static Message[] returnMesages(IMAPFolder folder)
			throws MessagingException {
		System.out
				.println("---------------------------------------Return Messages--------------------------------------------");
		Message[] message = folder.getMessages();

		return message;
	}

	/**Deletes a selected message
	 * @param i index of message
	 */
	public static void deleteMessage(int i) {
		try {
			//sets the flag of the message to deleted
			messages[i].setFlag(Flags.Flag.DELETED, true);
			System.out.println("The"+ i+" th"+"Mail has been deleted");
		} catch (MessagingException e) {
			e.printStackTrace();
		}
	}

	

	/** 
	 * @return the sore
	 */
	public static Store getSore() {
		return store;

	}

	/**
	 * @return the password
	 */
	public static String getPassword() {
		return password;
	}

	/**
	 * @return the user name
	 */
	public static String getUsername() {
		return username;
	}
}
