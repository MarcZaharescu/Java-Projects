package predictivegui;


import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JTextField;
import java.awt.GridLayout;
import java.io.IOException;
import java.util.Observer;
import java.util.Observable;

/**
 * The BoardView Class
 * Creates the buttons, adds the listeners, and sets the text on the screen on every update
 * @author mxz301
 *
 */
public class BoardView extends JPanel implements Observer
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 7522243226718662678L;
	private DictionaryModel model;
	private JButton[] cell;
	private JTextField screen;
	private JPanel panel1= new JPanel();
	public BoardView(DictionaryModel model)
	{
		// call super constructor
		
		super();
		
		//initialise model
		
		this.model = model;

		
		// create cell array
		
		cell = new JButton[13];
		
		// set layout
		
		
		setLayout(new GridLayout(1, 3));
		panel1.setLayout(new GridLayout(4, 3));
		
		   
		// creates a JTextArea screen
		screen = new JTextField(50);
		
		//adds it to the panel
		add(screen);
		
		//creates all the buttons
		cell[1] = new JButton("1");
		cell[2] = new JButton("2");
		cell[3] = new JButton("3");
		cell[4] = new JButton("4");
		cell[5] = new JButton("5");
		cell[6] = new JButton("6");
		cell[7] = new JButton("7");
		cell[8] = new JButton("8");
		cell[9] = new JButton("9");
		cell[10] = new JButton("0");
		cell[11] = new JButton("*");
		cell[12] = new JButton("-");
		
			// loop through board positions
		  // add listener
		 // place on a second panel
		
		for(int i = 1; i <= 11; i++)
		{
		
				
				cell[i].addActionListener(
					new ButtonListener(model,i,cell[i].getText()));
				
				panel1.add(cell[i]);
			}
		  
	cell[12].addActionListener(
			new ButtonListener(model,12,cell[12].getText()));
		
		panel1.add(cell[12]);
		
		
		
		
}
	/**
	 *  getPanel1() method
	 * @return the panel1
	 */
public JPanel getPanel1()
{
 return this.panel1;
}
    
	/**
	 *  Updates the screen text, after each ActionPerormed
	 */
	public void update(Observable obs, Object obj) throws NumberFormatException
	{
		
		
		try {
			screen.setText(model.getExistedWords()+" "+model.signatureToWords(model.getWord("")));
		} 
		catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("No words with this signature");
			System.out.println();
		} catch (IOException e)
		{
													// it catches certain exceptions which are caused by not being able to find a word with a specific signature inside the dictionary,
													//or if the format of the signature is not accepted
			e.printStackTrace();
		}
		catch (NumberFormatException e)
		{
			
		
		}
			
				
			
	}
}
		   
	
