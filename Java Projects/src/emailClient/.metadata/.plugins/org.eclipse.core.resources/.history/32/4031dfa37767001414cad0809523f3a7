
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

public class CopyFilesNIOV1 {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		FileInputStream fIn = null;
		FileOutputStream fout = null;
		FileChannel fIChan = null;
		FileChannel fOChan = null;

		JFileChooser chooser = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter(
				"Copy compressed files", "zip");
		chooser.setFileFilter(filter);
		int returnVal = chooser.showOpenDialog(null);
		if(returnVal == JFileChooser.APPROVE_OPTION) {
			long start = System.nanoTime();
			fIn = new FileInputStream(chooser.getSelectedFile());
			fIChan = fIn.getChannel();

			String savedFile = "d:\\" + chooser.getSelectedFile().getName(); 
			fout = new FileOutputStream(savedFile);
			fOChan = fout.getChannel();

			// Step 1: Create a buffer
			ByteBuffer buffer = ByteBuffer.allocate( 1024 );
			
			
			   while(true)
		        {
		            // Step 2: Write data from Channel into the Buffer
		            int read = fIChan.read(buffer);
		 
		            // did we reach the end of the channel? if yes
		            // jump out the while-loop
		            if (read == -1)
		                break;
		 
		            // Step 3: flip the buffer to switch  the ByteBuffer from "reading" (putting) to "writing" (getting)
		            buffer.flip();
		 
		            // Step 4: Read data out of the Buffer and then write to the destination channel
		            fOChan.write(buffer);
		 
		            // Step 5: clear the buffer and user it for the next read
		            // process
		            buffer.clear();
		        }
			fOChan.close();  
			fIChan.close(); 
			long end = System.nanoTime();

			System.out.println("Time taken by Java NIO buffer reading Files Copy = " + (end - start));
		}

	}

}
